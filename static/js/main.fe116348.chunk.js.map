{"version":3,"sources":["redux/dataReducer.js","redux/types.js","redux/rootReducer.js","components/CountryItem.js","components/OutputArea.js","redux/actions.js","App.js","serviceWorker.js","index.js"],"names":["initialState","allData","dataReducer","state","action","type","rootReducer","combineReducers","data","CountryItem","props","useState","itemExpendedStatus","setItemExpendedStatus","className","country","name","nativeName","src","flag","alt","capital","area","population","onChange","prevState","checked","gini","topLevelDomain","class","callingCodes","map","item","index","arr","key","length","timezones","borders","currencies","code","languages","regionalBlocs","acronym","id","onClick","event","connect","store","useStore","allCountriesData","latlng","dispatch","fetch","then","response","json","catch","err","console","log","App","Boolean","window","location","hostname","match","createStore","applyMiddleware","thunk","app","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4OAEMA,EAAe,CACpBC,QAAS,IAYKC,MATf,WAAoD,IAA/BC,EAA8B,uDAAtBH,EAAcI,EAAQ,uCAClD,OAAQA,EAAOC,MACd,ICR0B,yBDSzB,OAAO,2BAAIF,GAAX,IAAkBF,QAASG,EAAOH,UACnC,QACC,OAAOE,IERGG,EAAcC,YAAgB,CAC1CC,KAAMN,I,cCuDQO,MAxDf,SAAqBC,GAAQ,IAAD,EAEyBC,oBAAS,GAFlC,mBAEpBC,EAFoB,KAEAC,EAFA,KAY3B,OACA,yBAAKC,UAAU,mCACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,SACd,wBAAIA,UAAU,QAAQJ,EAAMK,QAAQC,KAApC,KAA4CN,EAAMK,QAAQE,WAA1D,KACA,yBAAKC,IAAKR,EAAMK,QAAQI,KAAMC,IAAKV,EAAMK,QAAQC,QAElD,yBAAKF,UAAU,OACd,2BAAG,uBAAGA,UAAU,oBAAhB,aAAiDJ,EAAMK,QAAQM,SAC/D,2BAAG,uBAAGP,UAAU,wBAAhB,UAAkDJ,EAAMK,QAAQO,KAAhE,WACA,2BAAG,uBAAGR,UAAU,iBAAhB,gBAAiDJ,EAAMK,QAAQQ,YAC/D,2BAAOlB,KAAK,WAAWS,UAAU,gBAAgBU,SAfpD,WACCX,GAAsB,SAAAY,GAAS,OAAKA,MAc4CC,QAASd,IACvF,yBAAKE,UAAU,aACd,2BAAG,uBAAGA,UAAU,2BAAhB,sBAAiEJ,EAAMK,QAAQY,MAAQ,iBACvF,2BAAG,uBAAGb,UAAU,6BAAhB,sBAAmEJ,EAAMK,QAAQa,gBACjF,2BAAG,uBAAGC,MAAM,qBAAZ,oBACEnB,EAAMK,QAAQe,aAAaC,KAAI,SAACC,EAAMC,EAAOC,GAC7C,OAAO,0BAAMC,IAAKH,GAAX,IAAmBA,EAAOE,EAAIE,SAAWH,EAAM,GAAM,KAArD,SACL,iBAEJ,2BAAG,uBAAGJ,MAAM,iBAAZ,iBACEnB,EAAMK,QAAQsB,UAAUN,KAAI,SAAAC,GAAI,OAAI,0BAAMG,IAAKH,GAAOA,EAAlB,UAAqC,iBAE3E,2BAAG,uBAAGH,MAAM,0BAAZ,iBACEnB,EAAMK,QAAQuB,QAAQP,KAAI,SAAAC,GAAI,OAAI,0BAAMG,IAAKH,GAAOA,OAAiB,iBAGvE,2BAAG,uBAAGH,MAAM,sBAAZ,kBACEnB,EAAMK,QAAQwB,WAAWR,KAAI,SAAAC,GAAI,OAAI,0BAAMG,IAAKH,GAAOA,EAAKhB,KAAvB,IAA8BgB,EAAKQ,KAAnC,SAAqD,iBAE5F,2BAAG,uBAAGX,MAAM,oBAAZ,gBACEnB,EAAMK,QAAQ0B,UAAUV,KAAI,SAAAC,GAAI,OAAI,0BAAMG,IAAKH,GAAOA,EAAKhB,KAAvB,IAA8BgB,EAAKf,WAAnC,SAA2D,iBAEjG,2BAAG,uBAAGY,MAAM,oBAAZ,sBACEnB,EAAMK,QAAQ2B,cAAcX,KAAI,SAAAC,GAAI,OAAI,0BAAMG,IAAKH,GAAOA,EAAKhB,KAAvB,IAA8BgB,EAAKW,QAAnC,SAAwD,kBAGnG,4BAAQtC,KAAK,SAASuC,GAAE,UAAKlC,EAAMK,QAAQC,KAAnB,eAAsCF,UAAU,4BAA4B+B,QA7CvG,SAA4BC,GAC3BjC,GAAsB,SAAAY,GAAS,OAAKA,OA4CkGb,EAAmC,YAAd,iBC1B7J,IAMemC,eANS,SAAA5C,GACvB,MAAO,CACNF,QAASE,EAAMK,KAAKP,WAIkB,KAAzB8C,EA1Bf,SAAoBrC,GACnB,IAAMsC,EAAQC,cAMRC,EAAmBxC,EAAMT,QAAQ8B,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAajB,QAASiB,EAAMG,IAAKH,EAAKmB,YAEzF,OACC,yBAAKP,GAAG,UACP,4BAAQvC,KAAK,SAASS,UAAU,uBAAuB+B,QARzD,WACCG,EAAMI,UCAA,SAASA,GACfC,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9C,GACL4C,EAXK,CACN/C,KJJ0B,yBIK1BJ,QASqBO,OAEpBiD,OAAM,SAAAC,GACNC,QAAQC,IAAIF,WDAZ,iBACA,6BACA,yBAAK5C,UAAU,OACboC,OENUW,MAXf,WACE,OACE,yBAAKhC,MAAM,aACT,yBAAKf,UAAU,OACb,wBAAIA,UAAU,QAAd,oBACA,kBAAC,EAAD,SCIYgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMlB,EAAQmB,YAAY7D,EAAa8D,YAAgBC,MACjDC,EACL,kBAAC,IAAD,CAAUtB,MAAOA,GAChB,kBAAC,EAAD,OAIFuB,iBAAOD,EAAKE,SAASC,eAAe,SAEpCV,OAAOf,MAAQA,EDiHT,kBAAmB0B,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.fe116348.chunk.js","sourcesContent":["import {SET_ALL_DATA} from './types';\r\n\r\nconst initialState = {\r\n\tallData: []\r\n};\r\n\r\nfunction dataReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_ALL_DATA:\r\n\t\t\treturn {...state, allData: action.allData}\r\n\t\tdefault: \r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default dataReducer","export const SET_ALL_DATA = \"COUNTRIES/SET_ALL_DATA\";","import {combineReducers} from 'redux';\r\nimport dataReducer from './dataReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n\tdata: dataReducer\r\n})","import React, {useState} from 'react';\r\nimport './CountryItem.css';\r\n\r\nfunction CountryItem(props) {\r\n\r\n\tconst [itemExpendedStatus, setItemExpendedStatus] = useState(false);\r\n\r\n\tfunction onItemClickHandler(event) {\r\n\t\tsetItemExpendedStatus(prevState => !prevState);\r\n\t}\r\n\r\n\tfunction inputCheckHandler() {\r\n\t\tsetItemExpendedStatus(prevState => !prevState);\r\n\t}\r\n\r\n\treturn (\r\n\t<div className=\"col-12 py-3 border country-item\">\r\n\t\t<div className=\"row\">\r\n\t\t\t<div className=\"col-4\">\r\n\t\t\t\t<h4 className=\"mb-3\">{props.country.name} ({props.country.nativeName})</h4>\r\n\t\t\t\t<img src={props.country.flag} alt={props.country.name} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col\">\r\n\t\t\t\t<p><i className=\"far fa-building\"></i> Capital: {props.country.capital}</p>\r\n\t\t\t\t<p><i className=\"fas fa-globe-africa\"></i> Area: {props.country.area} KmÂ²</p>\t\t\t\t\r\n\t\t\t\t<p><i className=\"fas fa-users\"></i> Population: {props.country.population}</p>\r\n\t\t\t\t<input type=\"checkbox\" className=\"show-more-btn\" onChange={inputCheckHandler} checked={itemExpendedStatus} />\r\n\t\t\t\t<div className=\"more-info\">\r\n\t\t\t\t\t<p><i className=\"fas fa-square-root-alt\"></i> Gini coefficient: {props.country.gini || \"not available\"}</p>\r\n\t\t\t\t\t<p><i className=\"fab fa-internet-explorer\"></i> Top Level Domain: {props.country.topLevelDomain}</p>\r\n\t\t\t\t\t<p><i class=\"fas fa-phone-alt\"></i> Calling code(s): \r\n\t\t\t\t\t\t{props.country.callingCodes.map((item, index, arr) => {\r\n\t\t\t\t\t\t\treturn <span key={item}> {item}{(arr.length !== index+1) && \", \"} </span>})\r\n\t\t\t\t\t\t|| \"not available\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p><i class=\"fas fa-clock\"></i> Time zone(s): \r\n\t\t\t\t\t\t{props.country.timezones.map(item => <span key={item}>{item}, </span>) || \"not available\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p><i class=\"fas fa-map-marked-alt\"></i> Time zone(s): \r\n\t\t\t\t\t\t{props.country.borders.map(item => <span key={item}>{item}</span>) || \"not available\"}\r\n\t\t\t\t\t</p>\r\n\r\n\t\t\t\t\t<p><i class=\"fas fa-money-bill\"></i> Currency(ies): \r\n\t\t\t\t\t\t{props.country.currencies.map(item => <span key={item}>{item.name}({item.code})</span>) || \"not available\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p><i class=\"fas fa-language\"></i> Language(s): \r\n\t\t\t\t\t\t{props.country.languages.map(item => <span key={item}>{item.name}({item.nativeName})</span>) || \"not available\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p><i class=\"fas fa-passport\"></i> Regional Block(s): \r\n\t\t\t\t\t\t{props.country.regionalBlocs.map(item => <span key={item}>{item.name}({item.acronym})</span>) || \"not available\"}\r\n\t\t\t\t\t</p>\t\t\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t<button type=\"button\" id={`${props.country.name}MoreInfoBtn`} className=\"btn btn-outline-secondary\" onClick={onItemClickHandler} >{!itemExpendedStatus ? \"Show more\" : \"Show less\"}</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t)\r\n}\r\n\r\nexport default CountryItem","import React from 'react';\r\nimport {useStore, useDispatch} from 'react-redux';\r\nimport {connect} from 'react-redux';\r\nimport CountryItem from './CountryItem';\r\nimport {fecthAllData} from '../redux/actions';\r\n\r\nfunction OutputArea(props) {\r\n\tconst store = useStore();\r\n\r\n\tfunction renderAllData() {\r\n\t\tstore.dispatch(fecthAllData());\r\n\t};\r\n\r\n\tconst allCountriesData = props.allData.map(item => <CountryItem country={item} key={item.latlng} />)\r\n\r\n\treturn (\r\n\t\t<div id=\"output\">\r\n\t\t\t<button type=\"button\" className=\"btn btn-success px-4\" onClick={renderAllData}>Load All Data</button>\r\n\t\t\t<hr />\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t{allCountriesData}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tallData: state.data.allData\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(OutputArea)","import {SET_ALL_DATA} from './types';\r\n\r\nexport function setAllData(allData) {\r\n\treturn {\r\n\t\ttype: SET_ALL_DATA,\r\n\t\tallData\r\n\t}\r\n};\r\n\r\nexport function fecthAllData() {\r\n\treturn function(dispatch) {\r\n\t\tfetch(\"https://restcountries.eu/rest/v2/\")\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => {\r\n\t\t\tdispatch(setAllData(data));\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconsole.log(err);\r\n\t\t});\r\n\t}\r\n}","import React from 'react';\nimport OutputArea from './components/OutputArea';\n\nfunction App() {\n  return (\n    <div class=\"container\">\n      <div className=\"App\">\n        <h1 className=\"my-3\">Country Info App</h1>\n        <OutputArea />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport {rootReducer} from './redux/rootReducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nconst app = (\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n)\n\nrender(app, document.getElementById('root'));\n\nwindow.store = store;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}