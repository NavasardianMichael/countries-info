{"version":3,"sources":["redux/dataReducer.js","redux/types.js","redux/rootReducer.js","components/CountryItem.js","redux/actions.js","components/OutputArea.js","components/FoundCountryNameItem.js","components/InputArea.js","App.js","serviceWorker.js","index.js"],"names":["initialState","allData","allCountriesNames","shownCountries","dataReducer","state","action","type","includes","newCountry","filter","country","rootReducer","combineReducers","data","CountryItem","props","dipstatch","useDispatch","useState","itemExpendedStatus","setItemExpendedStatus","className","onClick","removeCountry","name","nativeName","src","flag","alt","capital","area","population","onChange","prevState","checked","gini","topLevelDomain","callingCodes","map","item","index","arr","key","length","timezones","borders","currencies","code","languages","regionalBlocs","acronym","id","event","connect","store","useStore","allCountriesData","latlng","dispatch","FoundCountryNameItem","InputArea","inputText","setInputText","foundCountries","setFoundCountries","useEffect","fetch","then","response","json","allCountriesNamesArr","coutry","catch","err","console","log","redneredFoundCountries","placeholder","target","value","foundCountriesLocal","getState","toLowerCase","indexOf","push","App","Boolean","window","location","hostname","match","createStore","applyMiddleware","thunk","app","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b9b27747.chunk.js","sourcesContent":["import {SET_ALL_DATA, ADD_CHOSEN_COUNTRY, SHOW_ALL_COUNTRIES, SET_ALL_COUNTRIES_NAMES, REMOVE_COUNTRY} from './types';\r\n\r\nconst initialState = {\r\n\tallData: [],\r\n\tallCountriesNames: [],\r\n\tshownCountries: []\r\n};\r\n\r\nfunction dataReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_ALL_DATA:\r\n\t\t\treturn {...state, allData: action.allData}\r\n\t\tcase ADD_CHOSEN_COUNTRY:\r\n\t\t\tif(!state.shownCountries.includes(action.newCountry)) {\r\n\t\t\t\treturn {...state, shownCountries: [action.newCountry, ...state.shownCountries]}\r\n\t\t\t} else {\r\n\t\t\t\treturn state\r\n\t\t\t}\r\n\t\tcase SHOW_ALL_COUNTRIES:\r\n\t\t\treturn {...state, shownCountries: state.allData}\r\n\t\tcase REMOVE_COUNTRY:\r\n\t\t\treturn {...state, shownCountries: state.shownCountries.filter(country => country !== action.country)}\t\t\t\r\n\t\tcase SET_ALL_COUNTRIES_NAMES:\r\n\t\t\treturn {...state, allCountriesNames: action.allCountriesNames}\t\t\t\t\t\t\t\t\r\n\t\tdefault: \r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default dataReducer","export const SET_ALL_DATA = \"COUNTRIES/SET_ALL_DATA\";\r\nexport const ADD_CHOSEN_COUNTRY = \"COUNTRIES/ADD_CHOSEN_COUNTRY\";\r\nexport const SHOW_ALL_COUNTRIES = \"COUNTRIES/SHOW_ALL_COUNTRIES\";\r\nexport const SET_ALL_COUNTRIES_NAMES = \"COUNTRIES/SET_ALL_COUNTRIES_NAMES\";\r\nexport const REMOVE_COUNTRY = \"COUNTRIES/REMOVE_COUNTRY\";","import {combineReducers} from 'redux';\r\nimport dataReducer from './dataReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n\tdata: dataReducer\r\n})","import React, {useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {removeCountry} from '../redux/actions';\r\nimport './countryItem.css';\r\n\r\nfunction CountryItem(props) {\r\n\tconst dipstatch = useDispatch();\r\n\tconst [itemExpendedStatus, setItemExpendedStatus] = useState(false);\r\n\r\n\tfunction onItemClickHandler(event) {\r\n\t\tsetItemExpendedStatus(prevState => !prevState);\r\n\t}\r\n\r\n\tfunction inputCheckHandler() {\r\n\t\tsetItemExpendedStatus(prevState => !prevState);\r\n\t}\r\n\r\n\tfunction onClickRemoveItemHandler(country) {\r\n\t\tdipstatch(removeCountry(props.country))\r\n\t}\r\n\r\n\treturn (\r\n\t<div className=\"col-12 py-3 border country-item\">\r\n\t\t<div className=\"row\">\r\n\t\t\t<button type=\"button\" className=\"btn btn-outline-danger btn-close\" onClick={onClickRemoveItemHandler}>&times;</button>\r\n\t\t\t<div className=\"col-sm-4\">\r\n\t\t\t\t<h4 className=\"mb-3\">{props.country.name} ({props.country.nativeName})</h4>\r\n\t\t\t\t<img src={props.country.flag} alt={props.country.name} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col\">\r\n\t\t\t\t<p><i className=\"far fa-building\"></i> Capital: {props.country.capital}</p>\r\n\t\t\t\t<p><i className=\"fas fa-globe-africa\"></i> Area: {props.country.area} KmÂ²</p>\t\t\t\t\r\n\t\t\t\t<p><i className=\"fas fa-users\"></i> Population: {props.country.population}</p>\r\n\t\t\t\t<input type=\"checkbox\" className=\"show-more-btn\" onChange={inputCheckHandler} checked={itemExpendedStatus} />\r\n\t\t\t\t<div className=\"more-info\">\r\n\t\t\t\t\t<p><i className=\"fas fa-square-root-alt\"></i> Gini coefficient: {props.country.gini || \"not available\"}</p>\r\n\t\t\t\t\t<p><i className=\"fab fa-internet-explorer\"></i> Top Level Domain: {props.country.topLevelDomain}</p>\r\n\t\t\t\t\t<p><i className=\"fas fa-phone-alt\"></i> Calling code(s): \r\n\t\t\t\t\t\t{props.country.callingCodes.map((item, index, arr) => {\r\n\t\t\t\t\t\t\treturn <span key={item}> {item}{(arr.length !== index+1) && \", \"} </span>})\r\n\t\t\t\t\t\t|| \"not available\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p><i className=\"fas fa-clock\"></i> Time zone(s): \r\n\t\t\t\t\t\t{props.country.timezones.map((item, index, arr) => {\r\n\t\t\t\t\t\t\treturn <span key={item}> {item}{(arr.length !== index+1) && \", \"} </span>})\r\n\t\t\t\t\t\t|| \"not available\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p><i className=\"fas fa-map-marked-alt\"></i> Borders(s): \r\n\t\t\t\t\t\t{props.country.borders.map((item, index, arr) => {\r\n\t\t\t\t\t\t\treturn <span key={item}> {item}{(arr.length !== index+1) && \", \"} </span>})\r\n\t\t\t\t\t\t|| \"not available\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p><i className=\"fas fa-map-marked-alt\"></i> Currency(ies):  \r\n\t\t\t\t\t\t{props.country.currencies.map((item, index, arr) => {\r\n\t\t\t\t\t\t\treturn <span key={`${item.name}${item.code}`}> {item.name}({item.code}){(arr.length !== index+1) && \", \"} </span>})\r\n\t\t\t\t\t\t|| \"not available\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p><i className=\"fas fa-language\"></i> Language(s):  \r\n\t\t\t\t\t\t{props.country.languages.map((item, index, arr) => {\r\n\t\t\t\t\t\t\treturn <span key={`${item.name}${item.nativeName}`}> {item.name}({item.nativeName}){(arr.length !== index+1) && \", \"} </span>})\r\n\t\t\t\t\t\t|| \"not available\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p><i className=\"fas fa-passport\"></i> Regional Block(s): \r\n\t\t\t\t\t\t{props.country.regionalBlocs.map((item, index, arr) => {\r\n\t\t\t\t\t\t\treturn <span key={`${item.name}${item.acronym}`}> {item.name}({item.acronym}){(arr.length !== index+1) && \", \"} </span>})\r\n\t\t\t\t\t\t|| \"not available\"}\r\n\t\t\t\t\t</p>\t\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t<button type=\"button\" id={`${props.country.name}MoreInfoBtn`} className=\"btn btn-outline-secondary\" onClick={onItemClickHandler} >{!itemExpendedStatus ? \"Show more\" : \"Show less\"}</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t)\r\n}\r\n\r\nexport default CountryItem","import {SET_ALL_DATA, ADD_CHOSEN_COUNTRY, SHOW_ALL_COUNTRIES, SET_ALL_COUNTRIES_NAMES, REMOVE_COUNTRY} from './types';\r\n\r\nexport function setAllData(allData) {\r\n\treturn {\r\n\t\ttype: SET_ALL_DATA,\r\n\t\tallData\r\n\t}\r\n};\r\n\r\nexport function addChosenCountry(newCountry) {\r\n\treturn {\r\n\t\ttype: ADD_CHOSEN_COUNTRY,\r\n\t\tnewCountry\r\n\t}\r\n}\r\n\r\nexport function showAllCountries() {\r\n\treturn {\r\n\t\ttype: SHOW_ALL_COUNTRIES\r\n\t}\r\n}\r\n\r\nexport function setAllCountriesNames(allCountriesNames) {\r\n\treturn {\r\n\t\ttype: SET_ALL_COUNTRIES_NAMES,\r\n\t\tallCountriesNames\r\n\t}\r\n}\r\n\r\nexport function removeCountry(country) {\r\n\treturn {\r\n\t\ttype: REMOVE_COUNTRY,\r\n\t\tcountry\r\n\t}\r\n}\r\n\r\nexport function fecthAllData() {\r\n\treturn function(dispatch) {\r\n\t\tfetch(\"https://restcountries.eu/rest/v2/\")\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => {\r\n\t\t\tdispatch(setAllData(data));\r\n\t\t\tconst allCountriesNamesArr = data.map(coutry => coutry.name);\r\n\t\t\tdispatch(setAllCountriesNames(allCountriesNamesArr));\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconsole.log(err);\r\n\t\t});\r\n\t}\r\n}","import React from 'react';\r\nimport {useStore} from 'react-redux';\r\nimport {connect} from 'react-redux';\r\nimport CountryItem from './CountryItem';\r\nimport {showAllCountries} from '../redux/actions';\r\n\r\nfunction OutputArea(props) {\r\n\tconst store = useStore();\r\n\r\n\tfunction renderAllData() {\r\n\t\tstore.dispatch(showAllCountries());\r\n\t};\r\n\r\n\tconst allCountriesData = props.shownCountries.map(item => <CountryItem country={item} key={item.latlng} />)\r\n\r\n\treturn (\r\n\t\t<div id=\"outputArea\">\r\n\t\t\t<button type=\"button\" className=\"btn btn-success px-4\" onClick={renderAllData}>Load All Data</button>\r\n\t\t\t<hr />\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t{allCountriesData}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tshownCountries: state.data.shownCountries\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(OutputArea)","import React from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {addChosenCountry} from '../redux/actions';\r\n\r\nfunction FoundCountryNameItem(props) {\r\n\tconst dispatch = useDispatch();\r\n\tfunction onFoundCountryNameClickHandler() {\r\n\t\tdispatch(addChosenCountry(props.country));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"col-12 btn btn-outline-secondary found-country-name\" onClick={onFoundCountryNameClickHandler}\r\n\t\t>\r\n\t\t\t{props.country.name}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default FoundCountryNameItem","import React, {useState, useEffect} from 'react';\r\nimport {useStore} from 'react-redux';\r\nimport {fecthAllData} from '../redux/actions';\r\nimport FoundCountryNameItem from './FoundCountryNameItem';\r\nimport './inputArea.css';\r\n\r\nfunction InputArea() {\r\n\tconst store = useStore();\r\n\tconst [inputText, setInputText] = useState(\"\");\r\n\tconst [foundCountries, setFoundCountries] = useState([]);\r\n\r\n\t useEffect(() => {\r\n    \tstore.dispatch(fecthAllData());\r\n  \t},[]);\r\n\r\n\tfunction onInputChangeHandler(event) {\r\n\t\tsetInputText(event.target.value);\r\n\t\tvar foundCountriesLocal = [];\r\n\t\tstore.getState().data.allData.map(country => {\r\n\t\t\tif(event.target.value !== '' && country.name.toLowerCase().indexOf(event.target.value.toLowerCase()) === 0) {\r\n\t\t\t\tfoundCountriesLocal.push(country);\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetFoundCountries(foundCountriesLocal);\r\n\t}\r\n\t\r\n\tconst redneredFoundCountries = foundCountries.map(country => <FoundCountryNameItem country={country} key={`foundCountry${country.name}`}/>)\r\n\r\n\treturn (\r\n\t\t<div id=\"inputArea\" className=\"mb-3\">\r\n\t\t\t<input className=\"form-control\" type=\"text\" placeholder=\"Enter country name\" onChange={onInputChangeHandler} value={inputText}/>\r\n\t\t\t<div className=\"found-countries\">\r\n\t\t\t\t<div className=\"row m-0\">\r\n\t\t\t\t\t{redneredFoundCountries}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default InputArea","import React from 'react';\nimport OutputArea from './components/OutputArea';\nimport InputArea from './components/InputArea';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"App\">\n        <h1 className=\"my-3\">Country Info App</h1>\n        <InputArea />\n        <OutputArea />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport {rootReducer} from './redux/rootReducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nconst app = (\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n)\n\nrender(app, document.getElementById('root'));\n\nwindow.store = store;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}